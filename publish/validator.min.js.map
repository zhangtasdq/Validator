{"version":3,"sources":["webpack://RuleValidator/webpack/universalModuleDefinition","webpack://RuleValidator/webpack/bootstrap","webpack://RuleValidator/./src/impl/Engine.ts","webpack://RuleValidator/./src/impl/ExecutorFactory.ts","webpack://RuleValidator/./src/impl/GroupExecutor.ts","webpack://RuleValidator/./src/impl/SingleExecutor.ts","webpack://RuleValidator/./src/impl/Parser.ts","webpack://RuleValidator/./src/impl/OperatorFactory.ts","webpack://RuleValidator/./src/impl/Operator.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ExecutorFactory_1","Parser_1","OperatorFactory_1","Engine","contextData","this","executorFactory","operatorFactory","parser","currentRule","addRule","rule","setExecutorFactory","setOperatorFactory","parse","run","target","successCallback","errorCallback","executor","Error","result","execute","status","addGroupExecutor","addOperator","operator","GroupExecutor_1","SingleExecutor_1","andExecutor","children","j","length","orExecutor","itemResult","GroupExecutorFactory","groupExecutors","groupExecutorBuilder","_super","class_1","__extends","buildSingleExecutor","buildGroupExecutor","Group","GroupExecutor","childrens","addChild","executorItem","push","SingleExecutor","getObjValueByPath","path","pathArray","replace","split","tempTarget","getCurrentValue","current","getTargetValue","targetType","targetValue","currentValue","errorMsg","Parse","keys","parseGroup","parseSingle","getOperator","Operator_1","equalCallback","shadowEqual","notEqual","lessThan","lessThanInclusive","greaterThan","greaterThanInclusive","contains","indexOf","OperatorFactory","operators","callback","Operator"],"mappings":"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","file":"validator.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RuleValidator\"] = factory();\n\telse\n\t\troot[\"RuleValidator\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import EngineInterface from \"../interface/EngineInterface\";\r\nimport ExecutorInterface from \"../interface/ExecutorInterface\";\r\nimport ExecutorFactory from \"./ExecutorFactory\";\r\nimport ExecutorResult from \"../interface/ExecutorResult\";\r\nimport Parser from \"./Parser\"\r\nimport OperatorFactory from \"./OperatorFactory\";\r\n\r\nclass Engine implements EngineInterface {\r\n    private executorFactory: ExecutorFactory;\r\n    private currentRule:{[key:string]: ExecutorInterface};\r\n    private parser:Parser;\r\n    private contextData:Object;\r\n    private operatorFactory:OperatorFactory;\r\n\r\n    constructor(contextData = {}) {\r\n        this.executorFactory = new ExecutorFactory();\r\n        this.operatorFactory = new OperatorFactory();\r\n        this.parser = new Parser();\r\n        this.contextData = contextData;\r\n        this.currentRule = {};\r\n    }\r\n\r\n    addRule(key:string, rule:Object) {\r\n        this.parser.setExecutorFactory(this.executorFactory);\r\n        this.parser.setOperatorFactory(this.operatorFactory);\r\n        this.currentRule[key] = this.parser.parse(rule);\r\n    }\r\n\r\n    run(key:string, target:Object, successCallback: () => any, errorCallback?:(result:Object) => any) {\r\n        let executor = this.currentRule[key];\r\n        if (!executor) {\r\n            throw new Error(`规则 ${key} 不存在!`);\r\n        }\r\n        let result = executor.execute(target, this.contextData);\r\n        if (result.status) {\r\n            successCallback();\r\n        } else if(errorCallback){\r\n            errorCallback(result);\r\n        }\r\n    }\r\n\r\n    addGroupExecutor(key:string, executor: (children: ExecutorInterface[], target:Object, contextData:Object) => ExecutorResult) {\r\n        this.executorFactory.addGroupExecutor(key, executor);\r\n    }\r\n\r\n    addOperator(key:string, operator:(currentValue:any, targetValue:any) => boolean) {\r\n        this.operatorFactory.addOperator(key, operator);\r\n    }\r\n}\r\n\r\nexport default Engine;\r\n","import ExecutorResult from \"../interface/ExecutorResult\";\r\nimport ExecutorInterface from \"../interface/ExecutorInterface\";\r\nimport GroupExecutor from \"./GroupExecutor\";\r\nimport SingleExecutor from \"./SingleExecutor\";\r\nimport Operator from \"./Operator\";\r\nimport {SingleRuleInterface} from \"../interface/SingleRuleInterface\";\r\n\r\nlet andExecutor = (children: ExecutorInterface[], target:Object, contextData: Object) => {\r\n    let result = {status: true};\r\n\r\n    for(let i = 0, j = children.length; i < j; ++i) {\r\n        result = children[i].execute(target, contextData);\r\n        if (!result.status) {\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nlet orExecutor = (children: ExecutorInterface[], target:Object, contextData:Object) => {\r\n    let itemResult = null;\r\n\r\n    for(let i = 0, j = children.length; i < j; ++i) {\r\n        itemResult = children[i].execute(target, contextData);\r\n\r\n        if (itemResult.status) {\r\n            break;\r\n        }\r\n    }\r\n    return itemResult;\r\n};\r\n\r\nclass GroupExecutorFactory {\r\n    private groupExecutors: Object;\r\n\r\n    constructor() {\r\n        this.groupExecutors = {};\r\n        this.addGroupExecutor(\"and\", andExecutor);\r\n        this.addGroupExecutor(\"or\", orExecutor);\r\n    }\r\n\r\n    private groupExecutorBuilder(name:string, executor: (children: ExecutorInterface[], target:Object, contextData:Object) => ExecutorResult):typeof GroupExecutor {\r\n        return class extends GroupExecutor {\r\n            constructor() {\r\n                super(name, executor);\r\n            }\r\n        }\r\n    }\r\n\r\n    addGroupExecutor(name:string, executor: (children: ExecutorInterface[], target:Object, contextData:Object) => ExecutorResult):void {\r\n        this.groupExecutors[name] = this.groupExecutorBuilder(name, executor);\r\n    }\r\n\r\n    buildSingleExecutor(rule:any, operator:Operator):SingleExecutor {\r\n        rule = <SingleRuleInterface> rule;\r\n        return new SingleExecutor(\"singleExecutor\", rule, operator);\r\n    }\r\n\r\n    buildGroupExecutor(name:string):GroupExecutor {\r\n        let Group = this.groupExecutors[name];\r\n        if (!Group) {\r\n            throw new Error(`组 ${name} 不存在!`);\r\n        }\r\n        return new Group();\r\n    }\r\n}\r\n\r\nexport default GroupExecutorFactory;\r\n","import ExecutorResult from \"../interface/ExecutorResult\";\r\nimport ExecutorInterface from \"../interface/ExecutorInterface\";\r\n\r\nclass GroupExecutor implements ExecutorInterface {\r\n    readonly name:string;\r\n    private childrens:ExecutorInterface[];\r\n    private executor: (children: ExecutorInterface[], target:Object, contextData:Object) => ExecutorResult;\r\n\r\n    constructor(name:string, executor: (children: ExecutorInterface[], target:Object, contextData:Object) => ExecutorResult) {\r\n        this.name = name;\r\n        this.executor = executor;\r\n        this.childrens = [];\r\n    }\r\n\r\n    execute(target:Object, contextData:Object):ExecutorResult  {\r\n        return this.executor(this.childrens, target, contextData);\r\n    }\r\n\r\n    addChild(executorItem: ExecutorInterface) {\r\n        this.childrens.push(executorItem);\r\n    }\r\n}\r\n\r\nexport default GroupExecutor;\r\n","import ExecutorResult from \"../interface/ExecutorResult\";\r\nimport ExecutorInterface from \"../interface/ExecutorInterface\";\r\nimport Operator from \"./Operator\";\r\nimport {SingleRuleInterface} from \"../interface/SingleRuleInterface\";\r\n\r\nclass SingleExecutor implements ExecutorInterface {\r\n    readonly name:string;\r\n    private rule:SingleRuleInterface;\r\n    private operator:Operator;\r\n\r\n    constructor(name:string, rule:SingleRuleInterface, operator:Operator) {\r\n        this.name = name;\r\n        this.rule = rule;\r\n        this.operator = operator;\r\n    }\r\n\r\n    private getObjValueByPath(target:Object, path:string):any {\r\n        path = path.replace(/\\[(\\w+)\\]/, \".$1\");\r\n        path = path.replace(/^\\./, \"\");\r\n\r\n        let pathArray = path.split(\".\"),\r\n            tempTarget = target,\r\n            i = 0,\r\n            j = pathArray.length;\r\n\r\n        for(; i < j; ++i) {\r\n            let key = pathArray[i];\r\n\r\n            if (tempTarget.hasOwnProperty(key)) {\r\n                tempTarget = tempTarget[key];\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (j === pathArray.length) {\r\n            return tempTarget;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private getCurrentValue(current:Object):any  {\r\n        let value = this.getObjValueByPath(current, this.rule.key);\r\n        return value;\r\n    }\r\n\r\n    private getTargetValue(target:Object):any {\r\n        if (!this.rule.targetType || this.rule.targetType === \"plainValue\") {\r\n            return this.rule.targetValue;\r\n        }\r\n        return this.getObjValueByPath(target, this.rule.targetValue);\r\n    }\r\n\r\n    execute(current:Object, contextData:Object):ExecutorResult {\r\n        let currentValue = this.getCurrentValue(current),\r\n            targetValue = this.getTargetValue(contextData);\r\n\r\n        if (this.operator.run(currentValue, targetValue)) {\r\n            return {status: true};\r\n        }\r\n        return {status: false, errorMsg: this.rule.errorMsg};\r\n    }\r\n}\r\n\r\nexport default SingleExecutor;\r\n","import ExecutorInterface from \"../interface/ExecutorInterface\";\r\nimport ExecutorFactory from \"./ExecutorFactory\";\r\nimport OperatorFactory from \"./OperatorFactory\";\r\n\r\nclass Parse {\r\n    private executorFactory: ExecutorFactory;\r\n    private operatorFactory: OperatorFactory;\r\n\r\n    parse(rule:Object):ExecutorInterface {\r\n        let result,\r\n            keys = Object.keys(rule);\r\n\r\n        if(keys.length === 1) {\r\n            result = this.parseGroup(keys[0], rule[keys[0]]);\r\n        } else {\r\n            result = this.parseSingle(rule);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    parseGroup(key:string, rule:Object[]):ExecutorInterface {\r\n        let executor = this.executorFactory.buildGroupExecutor(key);\r\n\r\n        for(let i = 0, j = rule.length; i < j; ++i) {\r\n            executor.addChild(this.parse(rule[i]));\r\n        }\r\n\r\n        return executor;\r\n    }\r\n\r\n    parseSingle(rule:any):ExecutorInterface {\r\n        let operator = this.operatorFactory.getOperator(rule.operator);\r\n        return this.executorFactory.buildSingleExecutor(rule, operator);\r\n    }\r\n\r\n    setExecutorFactory(executorFactory:ExecutorFactory):void {\r\n        this.executorFactory = executorFactory;\r\n    }\r\n\r\n    setOperatorFactory(operatorFactory:OperatorFactory):void {\r\n        this.operatorFactory = operatorFactory;\r\n    }\r\n}\r\n\r\nexport default Parse;\r\n","import Operator from \"./Operator\";\r\n\r\nlet equalCallback = (currentValue:any, targetValue:any) => {\r\n    return currentValue === targetValue;\r\n}\r\n\r\nlet shadowEqual = (currentValue:any, targetValue:any) => {\r\n    return currentValue == targetValue;\r\n}\r\n\r\nlet notEqual = (currentValue:any, targetValue:any) => {\r\n    return currentValue !== targetValue;\r\n}\r\n\r\nlet lessThan = (currentValue:any, targetValue:any) => {\r\n    return currentValue < targetValue;\r\n}\r\n\r\nlet lessThanInclusive = (currentValue:any, targetValue:any) => {\r\n    return currentValue <= targetValue;\r\n};\r\n\r\nlet greaterThan = (currentValue:any, targetValue:any) => {\r\n    return currentValue > targetValue;\r\n};\r\n\r\nlet greaterThanInclusive = (currentValue:any, targetValue:any) => {\r\n    return currentValue >= targetValue;\r\n};\r\n\r\nlet contains = (currentValue, targetValue:any) => {\r\n    return currentValue.indexOf && currentValue.indexOf(targetValue) !== -1;\r\n};\r\n\r\nclass OperatorFactory {\r\n    private operators:{[key:string]: Operator};\r\n\r\n    constructor() {\r\n        this.operators = {};\r\n        this.addOperator(\"equal\", equalCallback);\r\n        this.addOperator(\"shadowEqual\", shadowEqual);\r\n        this.addOperator(\"notEqual\", notEqual);\r\n        this.addOperator(\"lessThan\", lessThan);\r\n        this.addOperator(\"lessThanInclusive\", lessThanInclusive);\r\n        this.addOperator(\"greaterThan\", greaterThan);\r\n        this.addOperator(\"greaterThanInclusive\", greaterThanInclusive);\r\n        this.addOperator(\"contains\", contains);\r\n    }\r\n\r\n    addOperator(name:string, callback:(currentValue: any, targetValue: any) => boolean):void {\r\n        this.operators[name] = new Operator(name, callback);\r\n    }\r\n\r\n    getOperator(name:string):Operator {\r\n        let result = this.operators[name];\r\n        if (!result) {\r\n            throw new Error(`操作 ${name} 不存在!`);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default OperatorFactory;\r\n","import OperatorInterface from \"../interface/OperatorInterface\";\r\n\r\nclass Operator implements OperatorInterface {\r\n   readonly name:string;\r\n   private executor: (currentValue:any, targetValue) => boolean;\r\n\r\n   constructor(name:string, executor: (currentValue:any, targetValue:any) => boolean) {\r\n       this.name = name;\r\n       this.executor = executor;\r\n   }\r\n\r\n    run(currentValue:any, targetValue:any):boolean {\r\n        return this.executor(currentValue, targetValue);\r\n    }\r\n}\r\n\r\nexport default Operator;\r\n"],"sourceRoot":""}